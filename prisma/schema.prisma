generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_URL")gitc
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  createdSubreddits    Subreddit[] @relation("CreatedBy")
  emailVerified DateTime?
  username      String?   @unique

  image        String?
  accounts     Account[]
  sessions     Session[]
  Post         Post[]
  Comment      Comment[]
  CommentVote  CommentVote[]
  Vote         Vote[]
  
  Subscription Subscription[]


}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String? //who created the subreddit
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  replyToId String? // if its a reply to another comment
  reployTo  Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

enum voteType {
  UP
  DOWN
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  type      voteType

  @@id([userId, commentId])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id])
  postId String
  type   voteType

  @@id([userId, postId])
}
